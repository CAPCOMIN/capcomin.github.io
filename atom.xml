<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Capcomin&#39;s blogs</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-19T14:44:23.643Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Capcomin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/01/19/hello-world/"/>
    <id>http://example.com/2022/01/19/hello-world/</id>
    <published>2022-01-19T11:36:00.000Z</published>
    <updated>2022-01-19T14:44:23.643Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LFSRXOR题解</title>
    <link href="http://example.com/2021/12/07/LFSRXOR%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2021/12/07/LFSRXOR%E9%A2%98%E8%A7%A3/</id>
    <published>2021-12-07T08:06:49.000Z</published>
    <updated>2022-01-19T15:05:38.729Z</updated>
    
    <content type="html"><![CDATA[<p>题目给出了一个Python加密算法，将代码稍作修改如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pylfsr <span class="keyword">import</span> LFSR</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># from secret import flag</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;DASCTF&quot;</span></span><br><span class="line">flag = <span class="built_in">bytes</span>(flag, encoding = <span class="string">&quot;utf8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">chr</span>(a ^ b)).encode(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">content, key</span>):</span></span><br><span class="line">    tmp = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(content)):</span><br><span class="line">        tmp += xor(content[i], key[i % <span class="built_in">len</span>(key)])</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shuffle_str</span>(<span class="params">s</span>):</span></span><br><span class="line">    str_list = <span class="built_in">list</span>(s)</span><br><span class="line">    random.shuffle(str_list)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> str_list).encode(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ran_str = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(random.randint(<span class="number">1</span>, <span class="number">256</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">512</span>)).encode()</span><br><span class="line">content = ran_str + flag</span><br><span class="line"></span><br><span class="line">L4 = LFSR(fpoly=[<span class="number">4</span>, <span class="number">3</span>], initstate=<span class="string">&#x27;random&#x27;</span>, verbose=<span class="literal">True</span>)</span><br><span class="line">data = L4.runFullCycle()</span><br><span class="line">k4 = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    a = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        a += <span class="built_in">str</span>(L4.<span class="built_in">next</span>()).encode()</span><br><span class="line">    k4 += long_to_bytes(<span class="built_in">int</span>(a, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">L5 = LFSR(fpoly=[<span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>], initstate=<span class="string">&#x27;random&#x27;</span>, verbose=<span class="literal">True</span>)</span><br><span class="line">data = L5.runFullCycle()</span><br><span class="line">k5 = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    a = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        a += <span class="built_in">str</span>(L5.<span class="built_in">next</span>()).encode()</span><br><span class="line">    k5 += long_to_bytes(<span class="built_in">int</span>(a, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">k4 = shuffle_str(k4)</span><br><span class="line">k5 = shuffle_str(k5)</span><br><span class="line"></span><br><span class="line">enc2 = encode(content, k5)</span><br><span class="line">enc1 = encode(content, k4)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(enc1)</span><br><span class="line"><span class="built_in">print</span>(enc2)</span><br></pre></td></tr></table></figure><p>经过分析，该代码通过调用pylfsr包的LFSR函数生成了L4和L5，进过处理后分别赋值给k4和k5变量，相关代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L4 = LFSR(fpoly=[<span class="number">4</span>, <span class="number">3</span>], initstate=<span class="string">&#x27;random&#x27;</span>, verbose=<span class="literal">True</span>)</span><br><span class="line">data = L4.runFullCycle()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L5 = LFSR(fpoly=[<span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>], initstate=<span class="string">&#x27;random&#x27;</span>, verbose=<span class="literal">True</span>)</span><br><span class="line">data = L5.runFullCycle()</span><br></pre></td></tr></table></figure><p>然后调用<code>random.shuffle()</code>函数将两个密钥打乱。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">k4 = shuffle_str(k4)</span><br><span class="line">k5 = shuffle_str(k5)</span><br></pre></td></tr></table></figure><p>最后调用<code>encode()</code>函数将两个密钥进行循环异或，密钥Key循环使用，得到最终的enc1和enc2。下面我们使用Python的交互式模式查看一下两个密钥的信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">L4.info()</span><br><span class="line"><span class="number">4</span> bit LFSR <span class="keyword">with</span> feedback polynomial  x^<span class="number">4</span> + x^<span class="number">3</span> + <span class="number">1</span></span><br><span class="line">Expected Period (<span class="keyword">if</span> polynomial <span class="keyword">is</span> primitive) =  <span class="number">15</span></span><br><span class="line">Current :</span><br><span class="line"> State        :  [<span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"> Count        :  <span class="number">15</span></span><br><span class="line"> Output bit   :  <span class="number">1</span></span><br><span class="line"> feedback bit :  <span class="number">0</span></span><br><span class="line"> Output <span class="type">Sequence</span> <span class="number">111000100110101</span></span><br></pre></td></tr></table></figure><p>调用pylfsr包的info()函数可以看出，L4的一些信息。但是因为<code>initstate=&#39;random&#39;</code>参数，所以这里我们主要关注Expected Period = 15，同样查看一下L5的info。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">L5.info()</span><br><span class="line"><span class="number">5</span> bit LFSR <span class="keyword">with</span> feedback polynomial  x^<span class="number">5</span> + x^<span class="number">4</span> + x^<span class="number">2</span> + x^<span class="number">1</span> + <span class="number">1</span></span><br><span class="line">Expected Period (<span class="keyword">if</span> polynomial <span class="keyword">is</span> primitive) =  <span class="number">31</span></span><br><span class="line">Current :</span><br><span class="line"> State        :  [<span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span>]</span><br><span class="line"> Count        :  <span class="number">0</span></span><br><span class="line"> Output bit   :  -<span class="number">1</span></span><br><span class="line"> feedback bit :  -<span class="number">1</span></span><br></pre></td></tr></table></figure><p>可以看出Expected Period = 31，这说明两个密钥的长度分别为<code>15</code>和<code>31</code>。通过<code>content = ran_str + flag</code>语句，content显然由随机字符串和flag构成，由于flag的特性，我们可以得出content的最后一个字符必定是’}’，也就是说enc变量最后一个字节和’}’异或必将是密钥的其中一位。通过这个信息，我们便可以着手破解密钥。</p><p>首先我们要搞清该题用到的一点数论基础。由于异或的性质，<code>k4</code>可以由<code>k5</code>与enc1和enc2异或计算得到。<br>$$<br>\because  Content_{i} ⊕ k4_{i\ mod\  15} = enc1_{i}\tag{1}<br>$$</p><p>$$<br>Content_{i} ⊕ k5_{i\ mod\  31} = enc2_{i}\tag{2}<br>$$</p><p>$$<br>\therefore k4_{i\ mod\  15} = k5_{i\ mod\  31} ⊕ enc1_{i} ⊕ enc2_{i}\tag{*}<br>$$</p><p>通过代码最后的注释，我们可以得到enc2的长度为810位，又因为k5为31位，因此enc2最后一个字节肯定是由<code>k5[810%31 - 1]</code>即<code>k5[3]</code>异或得到。写成Python代码即</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k5[<span class="number">3</span>] = enc2[<span class="number">809</span>] ^ <span class="built_in">ord</span>(<span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>根据(*)式的原理，不断进行for循环，当周期足够多时，就可以得到k4的所有字节，自然也会得到flag。这里要注意，因为k5比k4多一个字节，因此k4的所有字节均可通过循环异或得到，所以最后输出k4的解密结果，如果搞反会出错。脚本如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">enc1 = <span class="string">b&#x27;\xbb\xd3\x08\x15\xc6:\x08\xb2\xb2\x9f\xe4p\xc7\xec\x7f\xfd)\xf6f\x9c\xe4\xd12\xaeJ\x81\xb1\x88\xab\xa5V\xa9\x88\x14\xdf`~\xf6\xdbJ\xb4\x06S!0\xbb\xe4\x1a\xe6R\x8e\x84X\x19K\x95\x07C\xe8\xb2\&#x27;\xa9\x80\x15\xec\x8f\x8dY\nK\x85\x99\xb7!\x134\xa9\xb6\x15\xcf&amp;\r\x9b\xe1\x99\xe4]3h~\xf0\xa9\xa5\x14\xee&#125;\xd19l\x14h\x07v *a0\x12\x14\xfe\x0f\x05\xdem\x1d\xe4s2J\x7f\xc28\xf6RR\x8e\xba\xb2m\x18M\xf1\xef!4\x17\xa8\xb4\x14\xc2\x8f\xb9Y:K\xaa\x06T!\x1b\xbb\xfd\xf6Gv\x8e\x9a\xeb\xd9K\xbb\x06N\x9a\x82c\xa9\xa0\x14\xed!\x04\xdbm\x13\xe5w3B\x7f\xd0\xa9\xbf\xb7\x9c\xe3\xd00\x83K\x86\xab3\x7f\xc1\xbb\xfd\x11\x15\xdf\x8e\x80Y\x07\xd8\xe5]2m\xe9\xbb\xce`\x91o\x8f\x8cY!\x81\xe4J\x92\x8c\xa7T\x16E\x15\xf1WMY(\xb8[\x8e2y~\xcbM\x10\x15\xc7\x1fWY\x0cK\x87\xce\xe5 !b\xa8\x83\x14\xec6\xd1!\xc8\x905\xe52L\xf1\xba\xcf\n\x9d\x9d\xe7u\xadm\x06\xe4n2r\xd8\xba\xed\xf6\x7f\x9d\xd8\xd02m\x12G\x07Y\x89\x7f\xc0\xa8\xa4\x15\xe5\x043Y\x1eJ\xae\x07n\x94\x87\xbb\xcf_\x8d\x9d\xd1\x14Y,\x9e\xe5b\xd7\x8c\x7f\xf7\xa8\x8f\x14\xc7\x8f\xb3\xb6\xf1\x93\xe4O\xdd\xc4\xdb\xba\xf6!\x15\xfd.\xd1\x18\xcf\xf6\x03\xea2E\x7f\xe1\xa9\xa5\xfe\x9d\xc9\xd1;\xd9\xee\x05\x06z\xc8\xb2\xbb\xe2\xf7&#123;JW4\xcdm\x1a\xe5U\x8d \x0f&amp;\x14\x7f\xf6\x9d\xd4E\xbf\xc3\xdb\xe4L\xe1\xf7\x90\xbb\xdaZ\xf4\x9d\xd13\xb8m3\xe2D3o~\xf8H\xf6U*\x07lY\x03K\xab\x07~\xa3\x87\xbb\xc9\xf7sAQ\x08Y6J\x86\x07Y\xec\xf7\xbb\xc6s\x15\xc6\x7fEY\x02J\x95\x07Z \x11\xbb\xc6T\x15\xfc-\xd0\x06\xe6\x9f-\x07^ \x15\xbb\xccz\x14\xf3\x8f\x97\xd4l9t\x85\xe8\x8a\xbe\xbb\xf9\xf6f\x9d\xf2\xd19\xa2K\xb6\xcd\xcf\xf6~\xd5\xa9\xaa\x15\xd8\x8e\xb3\x81m9\xe4f\xb2!\x1e\xba\xd8s\xfd\x11\x08W\xa1l;\x01\x07_!\x11\xbb\xdd\xf6x\x9d\xf0\x17Y\x15\xfe\x02\xc7\xa0!.W\xa9\xa5\x8f\x9c\xe8\xd1\x12m\x04\xe5s3Q~\xdd\xa9\xa3\x15\xdb\x8f\xac\xaf\xec\xbb\x10\xde2_\xba\xba\xe8\xf6f.\x1e\xd1\x17l\x06\xe4U\xdd\xf0\xd6~\x0fA\x14\xcb\x8e\xb0Y\x1fJ\xb2\xe4\xb3!&quot;\xba\xfeU\x14\xedY\xd0&gt;l-~\x06P 1\xbb\xf2\xf6waD\xd1(m\x12`\x06@\xb6~\xfa\xa9\xb1\xb0\x9d\xfb\x18\xfbm&amp;\xe4v2w\xce\xba\xcbo\xd5\x07\x11QX&lt;J\xbd\xb22O\x7f\xd8x&gt;\xc8\x9c\xd3\xd03\x9d\xb5\x1e\xd72S\xf2ry\xf1W\x9c\xc89Y\rK\x8f\xff\x8a\xe0\xb5&#123;\xa9\xae\xb1\x9d\xdd\xd1=\xbeK\xa3\x06e!\x08\xba\xd2\xf6j\x9c\xf6\xd0\x0fl#\xe5o\xf5\xaa~\xc2\xa9\x99\x15\xea6\xd1:\xe7\xa8\xe4n\xbb \nV\xa9\x91\x14\xf9&#125;\xd0!m/\xe5|2o\x81\xba\xf8\r\x14\xeb\tR\xc9\xec\xdd`\xbf\xc6\x81\xdfKXW\xb3o.%\xa9\xcd\xb9\x14\xfd\x97\x83\x8eO\n\x03\xb6iuu\xab\x9d\xbc\x15\xf4\xc3\xd6\xc1&#x27;</span></span><br><span class="line">enc2 = <span class="string">b&#x27;p\xfd\x1ff\xcaB\xa5\xe6`\x87\xa8\x8ci\x855\x92O8P\xa5&#125;^\xd8\xed\x1a\x88=c\xe0\x9f\xedq\xf8\xe1%\x7fX\xd2\xba\xbe\x03\xa8\x9a\x9c\x075\x98&quot;\xca\xed\xa4C^\xc6.j\xec\xfa\x10\xa7\xd9\x01\x06\x87\x90f\xcc\xf6\x1b\x0c\xde\xcc,\xfb\xf0\xc74\x94\xcfj\x8ay\xd5\xd2`.@\xed\xc2\xd8!DSp\xf5\x12f\xf1\xf6#\x80\xbe\x16\xa8\xaeF\xd0\xd1\xd4\xad\xb9\xf7#\x16\x08\xb2[\x1a\x87\x8b\xa0\xfaEF\xbf\x86\x8b\x8c\x90\xa4\xd5\xfbcR\xe2W\x9c\n5\x8b\xcfQ&quot;\xf2\x16\x10\xb2I\x1a\x88\x8b\x8cj\x16\xebp\xccS\xd2\x90\xa8|q\x05\xafq\xfa\xcaHE&#123;\x1a\xba#\xfd\x17/\xb2L\x1a\x87\x8a\x90\xc9Dmp\xef\x0ef\xf2Z|S\x00R\xfc\x1c\x9d\n5\x84\xceS\xb0\xa4M_\xff\xb9\x1a\x8a\x1d\\\x98D\\p\xcb*f\xdcV\xd0\xd5Q\xec\x1a\xfa\xf0\x91\xa8\xd4\x8a\xca\x9c-\x17\x07\xb2_\xff\n\x8a\x83\xfb\xc2\x00\x10\x87\x83\xaeF\xf7#\xd4\xbe\&#x27;\xa9\x8a$IMp\x14\xe8\xc0\xa4z\xd1\xb2H\xe6e\x8b\xb0\xcf\xb1\x01&lt;\x87\x88g\xc2Q|H\xbe9\xa9\xad\x9c#4\x8cl8I\x0c\x17$\xb3&#125;\x1b\x94\x01:j7\x00;\x86\xbd\xd2i\xf6\x1a\xa4\&#x27;R\xf6?\x9c\x08\xe1\xd4\xab\xdd\x8f\xa4[_\xca/@\xed\xe86\xf7\x9c\x018i\x04\xc3\x90\xa8\xaa\x0c\xde\xf2\xa8\xba?\xf4\xd39\xce\\&quot;\xfe\x16\x0cY/]\xed\xe9l\xce\xa5\x018o,g\xdb\xf7\x12\xdag\xb6=\xfa\xccHgk\xcfH\xbf\x18\x9e\xbd\xb3u\x8f\n$Hk\x0e\xd3\xa6i\xe1\x15=\x16&#125;R]\xb3\xa8\x82\x9b\x0b4\x9a\xcf&#123;\xc2\xa4V\xe8:\x93\x1a\x83\x8a\x97j\t\x82\x88\x86\x80f\xf6*\xa2\xd5\xbe\x08\xa9\x98\x9c#\xf8\\\xceV\xa7\xa5L\xae&amp;/t\xec\xfb\xd9\x02Dnp\xe8Cf\xf0U&#125;R4\x87a\xfb\xf0I_\xd4\xaa\xb4&quot;\xca\x16\x18&gt;/i&#125;\t\x03\xc1\x84\x00!\x86\x93g\xed\xf7\x1d\xc3\xbf\x01c\x06KI[\xd5\x929g\xa4t\x87\xb2\\\x1b\x8d\x0b\xd9\x0bDp\xf5om\xe1\x16\x0e&#125;|ZR\xc4\xfb\xf2H@\xd4\xa28\\c\x17&amp;\x07\xc8\xda~\x8b\x88\x86DS\xeb\x87\x87f\xda\xf73\r\xcaS\xd9\xfa\xfaI`\xd5\x889^R\x97\xaeF\xf6\x1a\x92N\xd8*Er\xc3\x16\xe0)\x91\xba|_Q\x83\x00&gt;;\xff5\x82\xceX&quot;\xd7\x17\x08P\xae\x1a\xb1\x8a\x8f\xc9Ep\xa7\x86\x86g\xf6m|o\xbf\x1c\xa9\xa1\x9c+\xc9\x1e\xcfI#\xfc\x92^\xc1\xb8\x1b\xad\x8a\x9e\xceEu\xb8$\xe0\x0b\x90\x87&#125;[\x0fS\xcab]\xd2\xaaU\xcfh&quot;\xfc\xa2_\xdd/y&lt;C\x05k\x18\x00\x1aw\x1e\x9cA\xf6\x0f\x80w\x83\xae\xb8\x9d\x0e\xdc\xd4\xaf9H\\\xaf\x9ey\xef\x1b\xb4.\xd99Dd\xa2\x87\xa7f\xc6\xf6\n\x0c\xc4R\xd7\xfa\xe4Hc\xd4\xa78Jc\x9c^\xca.u\xed\xfcak&amp;\x8b\x92\x87\x88\xee\x90\x83\x90\x0c\xd9R\xcd\x08\x9c04\xb1\xceC&quot;\xea\xe9^\xe3\xd4\x1a\x9a\x0c[\xfa\xc5\x97\xf5&gt;\x15\xc71\x06\x8d\xac\x19\xa0\t\x0el\xe9\xc6%4\x9d\x80U\xe3\xfdF\x8d\xee\x17.+\x9b\xb3\xf0\x83w\x16\xd9&#x27;</span></span><br><span class="line">alphabet = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#123;&#125;&quot;</span></span><br><span class="line">k5 = []</span><br><span class="line">k4 = []</span><br><span class="line"><span class="keyword">for</span> temp <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    k4.append(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> temp <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>):</span><br><span class="line">    k5.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">k5[<span class="number">3</span>] = <span class="built_in">ord</span>(<span class="string">&#x27;&#125;&#x27;</span>) ^ enc2[<span class="number">809</span>]</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">810</span>, <span class="number">31</span>):</span><br><span class="line">    k4[c % <span class="number">15</span>] = k5[<span class="number">3</span>] ^ enc1[c] ^ enc2[c]</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">810</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">chr</span>(k4[c % <span class="number">15</span>] ^ enc1[c]) <span class="keyword">in</span> alphabet:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(k4[c % <span class="number">15</span>] ^ enc1[c]), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目给出了一个Python加密算法，将代码稍作修改如下所示。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;sp</summary>
      
    
    
    
    
    <category term="密码学" scheme="http://example.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
</feed>
